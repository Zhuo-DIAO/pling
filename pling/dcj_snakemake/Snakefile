import os
import pandas as pd
import sys
import math
from pling.utils import get_pling_root_dir, get_fasta_file_info

configfile: "../config.yaml"

FASTAFILES, FASTAEXT, FASTAPATH = get_fasta_file_info(config["genomes_list"])
GENOMES = list(FASTAEXT.keys())
OUTPUTPATH = config["output_dir"] #output directory will contain subdirectory with unimogs from integerisation pipeline, as well as placing all new output from current pipeline in subdirectories within it
PREFIX = config["prefix"]
INTEGERISATION = config["integerisation"]
JACCARD_THRESHOLD = config["seq_jaccard_distance"]
COMMUNITIES = config["communities"]
batch_size = config["batch_size"]
number_of_batches = math.ceil((len(GENOMES)*(len(GENOMES)-1)/2)/batch_size)

def get_plasmid_to_community():
    plasmid_to_community = {}
    with open(f"{COMMUNITIES}/objects/communities.txt") as communities_fh:
        for community_index, line in enumerate(communities_fh):
            plasmids = line.strip().split()
            for plasmid in plasmids:
                plasmid_to_community[plasmid] = community_index
    return plasmid_to_community

plasmid_to_community = get_plasmid_to_community()

def get_dist_files(jaccard_tsv):
    files=[]
    with open(jaccard_tsv, "r") as f:
        next(f)
        for line in f:
            plasmid_1, plasmid_2, jaccard = line.strip().split("\t")
            jaccard = float(jaccard)
            if jaccard >= JACCARD_THRESHOLD:
                files.append(f"{OUTPUTPATH}/tmp_files/dists_pairwise/{plasmid_1}~{plasmid_2}.dist")
    return files

def get_timelimit(timelimit):
    if config["timelimit"]=="None":
        return ""
    else:
        return f"--timelimit {timelimit}"

rule all:
    input:
        matrix = f"{OUTPUTPATH}/{PREFIX}_matrix.dist",
        dcj_graph_outdir = f"{OUTPUTPATH}/dcj_graph"

rule ding:
    input:
        unimog_dir = lambda wildcards: f"{OUTPUTPATH}/unimogs/batch_{wildcards.batch}",
        jaccard_tsv = lambda wildcards: f"{OUTPUTPATH}/tmp_files/jaccard_pairwise/batch_{wildcards.batch}_jaccard.tsv"
    output:
        f"{OUTPUTPATH}/tmp_files/ding/completion/batch_{{batch}}"
    params:
        jaccard_distance=JACCARD_THRESHOLD,
        ilp_solver=config["ilp_solver"],
        integerisation=INTEGERISATION,
        outputpath=OUTPUTPATH,
        batch=lambda wildcards: wildcards.batch,
        timelimit=get_timelimit(config["timelimit"]),
        snakefile_dir=os.path.dirname(sys.argv[sys.argv.index("--snakefile")+1]),
        pling_root_dir = get_pling_root_dir()
    resources:
        mem_mb = lambda wildcards, attempt: attempt * config["ilp_mem"]
    conda: "../envs/ding_and_glpk.yaml"
    shell:
            """
            PATH="$CONDA_PREFIX"/bin:$PATH  # quick fix for the issue described above
            python {params.pling_root_dir}/pling/dcj_snakemake/run_ding.py \
                    --batch {params.batch} \
                    --jaccard_tsv {input.jaccard_tsv} \
                    --jaccard_distance {params.jaccard_distance} \
                    --outputpath {params.outputpath} \
                    --integerisation {params.integerisation} \
                    --ilp_solver {params.ilp_solver} \
                    {params.timelimit} \
                    --snakefile_dir {params.snakefile_dir}
            """

rule dcj_matrix:
    input:
        unimogs_done = expand(f"{OUTPUTPATH}/tmp_files/ding/completion/batch_{{batch}}", batch=[str(i) for i in range(number_of_batches)])
    output:
        matrix=f"{OUTPUTPATH}/{PREFIX}_matrix.dist"
    conda:
        "../envs/blocks.yaml"
    params:
        dist_files = get_dist_files(f"{OUTPUTPATH}/jaccard/all_pairs_jaccard_distance.tsv"),
        genomes= GENOMES,
        outputpath = OUTPUTPATH
    resources:
        mem_mb = lambda wildcards, attempt: attempt * config["dcj_matrix_mem"]
    script:
        "dcj_matrix.py"

rule dcj_tsv:
    input:
        unimogs_done = expand(f"{OUTPUTPATH}/tmp_files/ding/completion/batch_{{batch}}", batch=[str(i) for i in range(number_of_batches)])
    output:
        tsv=f"{OUTPUTPATH}/{PREFIX}_distances.tsv"
    conda:
        "../envs/blocks.yaml"
    params:
        dist_files = get_dist_files(f"{OUTPUTPATH}/jaccard/all_pairs_jaccard_distance.tsv"),
        genomes= GENOMES,
        outputpath = OUTPUTPATH
    resources:
        mem_mb = lambda wildcards, attempt: attempt * config["dcj_matrix_mem"]
    script:
        "dcj_tsv.py"

rule build_DCJ_graph:
    input:
        distances_tsv = rules.dcj_tsv.output.tsv,
        communities=COMMUNITIES+"/objects/communities.pkl"
    output:
        dcj_graph_outdir = directory(f"{OUTPUTPATH}/dcj_graph")
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: config["build_DCJ_graph_mem"]*attempt
    conda: "../envs/plasnet.yaml"
    params:
        dcj_dist_threshold=config["dcj_dist_threshold"],
        small_subcommunity_size_threshold = config["small_subcommunity_size_threshold"] #Communities with size up to this parameter will be joined to neighbouring larger subcommunities
    shell: """
            plasnet type \
                --distance-threshold {params.dcj_dist_threshold} \
                --small-subcommunity-size-threshold {params.small_subcommunity_size_threshold} \
                {input.communities} \
                {input.distances_tsv} \
                {output.dcj_graph_outdir}
        """
