import os
import pandas as pd

configfile: "../config.yaml"

FASTAFILES = [el[0] for el in pd.read_csv(config["genomes_list"], header=None).values]
FASTAEXT = {os.path.splitext(os.path.basename(el))[0]:os.path.splitext(os.path.basename(el))[1] for el in FASTAFILES}
GENOMES = list(FASTAEXT.keys())
FASTAPATH = os.path.dirname(FASTAFILES[0])
OUTPUTPATH = config["output_dir"]
PREFIX = config["prefix"]

include: "../common_rules/common_rules.smk"

rule all:
    input:
        communities = f"{OUTPUTPATH}/jaccard/jaccard_communities"

rule pairwise_seq_jaccard:
    input:
        genome_1_fasta=lambda wildcards: f"{FASTAPATH}/{wildcards.genome1}{FASTAEXT[wildcards.genome1]}",
        genome_2_fasta=lambda wildcards: f"{FASTAPATH}/{wildcards.genome2}{FASTAEXT[wildcards.genome2]}"
    output:
        jaccard=f"{OUTPUTPATH}/tmp_files/jaccard_pairwise/{{genome1}}~{{genome2}}_jaccard_distance.tsv"
    threads: config["pairwise_seq_jaccard_threads"]
    resources:
        mem_mb=lambda wildcards, attempt: config["pairwise_seq_jaccard_mem"]*attempt
    conda: "../envs/integerise.yaml"
    params:
        genome1 = lambda wildcards: wildcards.genome1,
        genome2 = lambda wildcards: wildcards.genome2,
        identity_threshold = config["identity_threshold"],
    shadow: "shallow"
    shell: """
        # set conda env first in $PATH - TODO: keep this or manage in other way?
        # this issue happens when running a pipeline and a conda env is already active but it is not the first
        # in the $PATH that have python installed (let's call this env E).
        # In this case, snakemake will activate the "../envs/integerise.yaml" env but the python in the $PATH is the one
        # in E, which won't have the dependencies required to run the script below.
        # This is the expected behaviour, is not a bug in conda or snakemake.
        # For more details, see https://github.com/conda/conda/issues/9392#issuecomment-1291041085 
        PATH="$CONDA_PREFIX"/bin:$PATH  # quick fix for the issue described above
        
        python pling/jac_network_snakemake/seq_jaccard.py \
            {params.genome1} {params.genome2} \
            {input.genome_1_fasta} {input.genome_2_fasta} \
            {params.identity_threshold} \
            {output.jaccard}
    """


rule get_communities:
    input:
        jaccard = f"{OUTPUTPATH}/jaccard/all_pairs_jaccard.tsv"
    output:
        communities = f"{OUTPUTPATH}/jaccard/jaccard_communities.txt",
        communities_sizes = f"{OUTPUTPATH}/jaccard/jaccard_communities_sizes.txt",
        isolates = f"{OUTPUTPATH}/jaccard/jaccard_isolates.txt"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: config["get_communities_mem"]*attempt
    conda: "../envs/env.yaml"
    params:
        jaccard_threshold=config["seq_jaccard_threshold"],
        genomes = GENOMES
    script: "get_communities.py"