import os
import pandas as pd

configfile: "../config.yaml"

OUTPUTPATH = config["output_dir"]
PREFIX = config["prefix"]
FASTAFILES = [el[0] for el in pd.read_csv(config["genomes_list"], header=None).values]
FASTAEXT = {os.path.splitext(os.path.basename(el))[0]:os.path.splitext(os.path.basename(el))[1] for el in FASTAFILES}
GENOMES = list(FASTAEXT.keys())
FASTAPATH = os.path.dirname(FASTAFILES[0])

def get_pairs():
    genome_pairs=[]
    n = len(GENOMES)
    for i in range(n):
        j=0
        while j<i:
            genome_pairs.append([GENOMES[i], GENOMES[j]])
            j=j+1
    return genome_pairs

PAIRS = get_pairs()

def get_files(type):
    files = []
    if type == "jaccard":
        dir = f"{OUTPUTPATH}/tmp_files/jaccard_pairwise"
        end = "jaccard.tsv"
    elif type == "unimog":
        dir = f"{OUTPUTPATH}/unimogs"
        end = "align.unimog"
    for el in PAIRS:
        if len(el)>1:
            files.append(f"{dir}/{el[0]}~{el[1]}_{end}")
    return files

rule all:
    input:
        unimogs = get_files("unimog"),
        seq_jaccard = f"{OUTPUTPATH}/jaccard/all_pairs_jaccard.tsv",
        communities = f"{OUTPUTPATH}/jaccard/jaccard_communities.txt",
        communities_sizes = f"{OUTPUTPATH}/jaccard/jaccard_communities_sizes.txt"

rule make_unimogs:
    input:
        genome_1_fasta=lambda wildcards: f"{FASTAPATH}/{wildcards.genome1}{FASTAEXT[wildcards.genome1]}",
        genome_2_fasta=lambda wildcards: f"{FASTAPATH}/{wildcards.genome2}{FASTAEXT[wildcards.genome2]}"
    output:
        unimogs=f"{OUTPUTPATH}/unimogs/{{genome1}}~{{genome2}}_align.unimog",
        jaccard=f"{OUTPUTPATH}/tmp_files/jaccard_pairwise/{{genome1}}~{{genome2}}_jaccard.tsv",
        seq_blocks=f"{OUTPUTPATH}/unimogs/{{genome1}}~{{genome2}}_map.txt"
    threads: config["make_unimogs_threads"]
    resources:
        mem_mb=lambda wildcards, attempt: config["make_unimogs_mem"]*attempt
    params:
        genome1 = lambda wildcards: wildcards.genome1,
        genome2 = lambda wildcards: wildcards.genome2,
        identity_threshold = config["identity_threshold"]
    conda: "../envs/integerise.yaml"
    shadow: "shallow"
    shell:
        """
        # set conda env first in $PATH
        PATH="$CONDA_PREFIX"/bin:$PATH
        python pling/align_snakemake/unimog.py \
            --genome_1_fasta {input.genome_1_fasta} \
            --genome1 {params.genome1} \
            --genome_2_fasta {input.genome_2_fasta} \
            --genome2 {params.genome2} \
            --identity_threshold {params.identity_threshold} \
            --unimogs {output.unimogs} \
            --jaccard {output.jaccard} \
            --seq_blocks {output.seq_blocks}
        """

rule cat_jaccard:
    input:
        jaccards = get_files("jaccard")
    output:
        jaccard = f"{OUTPUTPATH}/jaccard/all_pairs_jaccard.tsv"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: 4000*attempt
    shell:
        "cat {input.jaccards} > {output.jaccard}"

rule get_communities:
    input:
        jaccard = f"{OUTPUTPATH}/jaccard/all_pairs_jaccard.tsv"
    output:
        communities = f"{OUTPUTPATH}/jaccard/jaccard_communities.txt",
        communities_sizes = f"{OUTPUTPATH}/jaccard/jaccard_communities_sizes.txt",
        isolates = f"{OUTPUTPATH}/jaccard/jaccard_isolates.txt"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: config["get_communities_mem"]*attempt
    conda: "../envs/env.yaml"
    params:
        jaccard_threshold=config["seq_jaccard_threshold"],
        genomes=GENOMES
    script: "get_communities.py"
