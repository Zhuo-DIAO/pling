import os
import pymummer
from operator import attrgetter
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq
import shutil
import pandas as pd
from pathlib import Path
import matplotlib.pyplot as plt
import numpy as np

GENOMES = [el[0] for el in pd.read_csv(config["genome_list"], header=None).values]
FASTAPATH = config["fastas"]
OUTPUTPATH = config["output_dir"]
PREFIX = config["prefix"]

rule all:
    input:
        relabelled_dir = f"{OUTPUTPATH}/unimogs/relabelled/blocks"

rule gen_MSA_input:
    input:
        lambda wildcards: expand(f"{FASTAPATH}/{{genome}}.fna", genome=GENOMES)
    output:
        f"{OUTPUTPATH}/tmp_files/{PREFIX}.fna"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1000
    shell:
        "cat {input} > {output}"

rule nucmer:
    input:
        query = f"{OUTPUTPATH}/tmp_files/{PREFIX}.fna",
        ref = f"{OUTPUTHPATH}/{GENOMES[0]}.fna"
    output:
        nucmer = f"{OUTPUTPATH}/tmp_files/{PREFIX}.nucmer"
    run:
        prunner = pymummer.nucmer.Runner(
            params.ref,
            input.query,
            output.nucmer,
            min_id=90.0,     # minimum percent identity of match
            promer=False,
            maxmatch=True,
            breaklen=500,    # how far to look to join up matches before giving up
            min_length=800, # minimum length of match to report
        )
        prunner.run()

rule orient:
    input:
        nucmer = f"{OUTPUTPATH}/tmp_files/{PREFIX}.nucmer",
        sequences = expand(f"{FASTAPATH}/{{genome}}.fna", genome=GENOMES)
    params:
        ref = f"{OUTPUTHPATH}/{GENOMES[0]}.fna",
        genomes = GENOMES,
        fastapath = FASTAPATH,
        outputpath = OUTPUTPATH
    output:
        directory(f"{OUTPUTPATH}/tmp_files/oriented_fasta/"),
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1000
    script:
        "orient.py"

rule bakta:
    input:
        genome = f"{FASTAPATH}/{{genome}}.fna"
    output:
        ann_dir = directory(f"{OUTPUTPATH}/annotation/bakta/{{genome}}")
    conda:
        "bakta"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: attempt * 15000
    params:
        DB = directory(f"{config['bakta_db']}")
    shell:
        """
        bakta {input.genome} --skip-plot --db {params.DB} --prefix {wildcards.genome} \
         --translation-table 11 --threads {threads} --output {output.ann_dir} >{log} 2>&1
        """

rule panaroo:
    input:
        expand(f"{OUTPUTPATH}/annotation/bakta/{{genome}}/{{genome}}.gff3", genome=GENOMES)
    output:
        pangenome = directory(f"{OUTPUTPATH}/annotation/panaroo"),
        aln = directory(f"{OUTPUTPATH}/annotation/panaroo/aligned_gene_sequences")
    shell:
        "panaroo -i {input} -o {output.pangenome} --clean-mode moderate -a pan "

rule gen_minimap_input:
    input:
        align_dir=directory(f"{OUTPUTPATH}/annotation/panaroo/aligned_gene_sequences")
    output:
        f"{OUTPUTPATH}/tmp_files/minimap/input/{{genome}}.fna"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1000
    params:
        out_dir=f"{OUTPUTPATH}/tmp_files/minimap/input"
    run:
        seq_out = dict()
        for file in os.listdir(input.align_dir):
            file_name = str(Path(file))
            gene = str(Path(file).with_suffix(""))
            gene = gene.replace(".aln", "")
            seq_in = SeqIO.parse(f"{input.align_dir}/{file_name}", "fasta")
            for record in seq_in:
                genome, prokka_gene = record.id.split(';')
                blah = (str(record.seq)).replace('-','')
                seq = Seq(blah)
                if genome not in seq_out:
                    seq_out[genome] = [SeqRecord(seq, gene, "", "")]
                else:
                    (seq_out[genome]).append(SeqRecord(seq, gene, "", ""))
        for genome in seq_out:
            SeqIO.write(seq_out[genome], f"{params.out_dir}/{genome}.fna", "fasta")

rule minimap:
    input:
        reads=f"{OUTPUTPATH}/tmp_files/minimap/input/{{genome}}.fna",
        #ref=OUTPUTPATH+"/oriented_fasta/{lineage}/{genome}.fna"
        dir_ref = f"{OUTPUTPATH}/tmp_files/oriented_fasta/"
    output:
        f"{OUTPUTPATH}/tmp_files/minimap/output/{{genome}}.paf"
    threads: 3 #minimap default
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1000
    shell:
        "minimap2 -c {input.dir_ref}/{wildcards.genome}.fna {input.reads} > {output}"

rule consolidation:
    input:
        lambda wildcards: [f"{OUTPUTPATH}/tmp_files/minimap/output/{genome}.paf" for genome in GENOMES],
    output:
        unimogpath = f"{OUTPUTPATH}/unimogs/{PREFIX}_anno.unimog",
        map = f"{OUTPUTPATH}/{PREFIX}_map.txt"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1000
    params:
        pafs=f"{OUTPUTPATH}/minimap/output",
        genomes = GENOMES,
        fastapath = FASTAPATH,
        outputpath = OUTPUTPATH
    script:
        "consolidation.py"

rule get_all_pairs_gene_jaccard:
    input:
        unimog = f"{OUTPUTPATH}/unimogs/{PREFIX}_anno.unimog"
    output:
        gene_jaccard = f"{OUTPUTPATH}/jaccard/all_pairs_jaccard.tsv"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: 8000*attempt
    params:
        genomes = GENOMES
    script:
        "gene_jaccard.py"

rule get_communities:
    input:
        gene_jaccard = f"{OUTPUTPATH}/jaccard/all_pairs_jaccard.tsv"
    output:
        communities = f"{OUTPUTPATH}/jaccard/jaccard_communities.txt",
        communities_sizes = f"{OUTPUTPATH}/jaccard/jaccard_communities_sizes.txt"
    threads: 1
    resources:
        mem_mb=lambda wildcards, attempt: 4000*attempt
    conda: "envs/env.yaml"
    params:
        gene_jaccard_threshold=config["gene_jaccard_threshold"]
    script: "scripts/get_communities.py"

rule deduplication:
    input:
        fasta = f"{OUTPUTPATH}/tmp_files/{PREFIX}.fna",
        unimog = f"{OUTPUTPATH}/unimogs/{PREFIX}_anno.unimog",
        communities = f"{OUTPUTPATH}/jaccard/jaccard_communities.txt",
        map = f"{OUTPUTPATH}/{PREFIX}_map.txt"
    output:
        nucmer = directory(f"{OUTPUTPATH}/tmp_files/nucmer"),
        relabelled_dir = directory(f"{OUTPUTPATH}/unimogs/relabelled/dedup")
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1000
    params:
        pafs=f"{OUTPUTPATH}/minimap/output"
        nucmer_threshold=98.5
    script:
        "multipartite.py"

rule blocks:
    input:
        map = f"{OUTPUTPATH}/{PREFIX}_map.txt",
        communites = f"{OUTPUTPATH}/jaccard/jaccard_communities.txt",
        unimog = f"{OUTPUTPATH}/unimogs/{PREFIX}_anno.unimog"
    output:
        relabelled_dir = directory(f"{OUTPUTPATH}/unimogs/relabelled/blocks")
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: attempt * 1000
    script:
        "blocks.py"
